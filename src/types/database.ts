// src/types/database.ts

/**
 * --- BASE INTERFACES ---
 * These interfaces define the fundamental shapes of our data models.
 * They are extended by more specific interfaces below.
 */

// A base for any question, containing universal properties.
interface IQuestionBase {
    id: string; // Using UUID for unique identification.
    questionText: string;
}

/**
 * --- QUESTION TYPE INTERFACES ---
 * Each interface here represents a specific type of question,
 * extending the base to add its unique properties.
 */

// For Multiple Choice Questions (MCQ)
export interface IMCQOption {
    id: string;
    text: string;
    isCorrect: boolean;
}
export interface IQuestionMCQ extends IQuestionBase {
    type: 'mcq';
    options: IMCQOption[];
}

// For Smart Text Input (sti) / Fill-in-the-Blank
export interface IQuestionSTI extends IQuestionBase {
    type: 'sti';
    correctAnswers: string[];
    evaluationMode: 'case-insensitive' | 'exact-match';
}

// For Algebraic Equations
export interface IQuestionAlgEquation extends IQuestionBase {
    type: 'alg-equation';
    equation: string;
    variables: string[];
}

// --- NEW QUESTION TYPES ---

// For "Highlight the correct part of the text" questions
export interface IQuestionHighlightText extends IQuestionBase {
    type: 'highlight-text';
    passage: string; // The full block of text for the student to read.
    correctHighlights: string[]; // An array of substrings that are correct answers.
}

// For "Free Response" / essay questions that require manual grading.
export interface IQuestionFreeResponse extends IQuestionBase {
    type: 'free-response';
    // This type is simple; it primarily relies on the questionText.
    // Grading will be manual, so no correct answer is stored here.
}

// For "Correct the sentence" questions.
export interface IQuestionSentenceCorrection extends IQuestionBase {
    type: 'sentence-correction';
    sentenceWithMistake: string; // The incorrect sentence shown to the student.
    correctedSentence: string; // The correct version for auto-grading.
}

/**
 * --- UNION TYPE ---
 * The IQuestion type is a union of all possible question interfaces.
 * This allows us to have a single array of questions of different types
 * while maintaining strict type safety.
 */
export type IQuestion =
    | IQuestionMCQ
    | IQuestionSTI
    | IQuestionAlgEquation
    | IQuestionHighlightText
    | IQuestionFreeResponse
    | IQuestionSentenceCorrection; // <-- The missing piece of the puzzle.

/**
 * --- COURSE INTERFACE ---
 * Defines the structure for a course, which is a collection of questions.
 */
export interface ICourse {
    id?: number; // Optional because it's auto-generated by the database.
    title: string;
    subject: 'Math' | 'Reading' | 'Writing' | 'English'; // Subject expanded.
    questions: IQuestion[];
}
